#ifndef __OV2640_H__
#define __OV2640_H__
#include <stdint.h>
#include "2640_reg.h"
#include <bsp.h>
#include <sysctl.h>
typedef enum {
	PIXFORMAT_INVLAID = 0,
	PIXFORMAT_BAYER,     // RAW
	PIXFORMAT_RGB565,    // RGB565
	PIXFORMAT_YUV422,    // YUV422
	PIXFORMAT_GRAYSCALE, // GRAYSCALE
	PIXFORMAT_JPEG,      // JPEG/COMPRESSED
} pixformat_t;

typedef enum {
	FRAMESIZE_INVALID = 0,
	// C/SIF Resolutions
	FRAMESIZE_QQCIF,    // 88x72
	FRAMESIZE_QCIF,     // 176x144
	FRAMESIZE_CIF,      // 352x288
	FRAMESIZE_QQSIF,    // 88x60
	FRAMESIZE_QSIF,     // 176x120
	FRAMESIZE_SIF,      // 352x240
	// VGA Resolutions
	FRAMESIZE_QQQQVGA,  // 40x30
	FRAMESIZE_QQQVGA,   // 80x60
	FRAMESIZE_QQVGA,    // 160x120
	FRAMESIZE_QVGA,     // 320x240
	FRAMESIZE_VGA,      // 640x480
	FRAMESIZE_HQQQVGA,  // 60x40
	FRAMESIZE_HQQVGA,   // 120x80
	FRAMESIZE_HQVGA,    // 240x160
	// FFT Resolutions
	FRAMESIZE_64X32,    // 64x32
	FRAMESIZE_64X64,    // 64x64
	FRAMESIZE_128X64,   // 128x64
	FRAMESIZE_128X128,  // 128x128
	// Other
	FRAMESIZE_LCD,      // 128x160
	FRAMESIZE_QQVGA2,   // 128x160
	FRAMESIZE_WVGA,     // 720x480
	FRAMESIZE_WVGA2,    // 752x480
	FRAMESIZE_SVGA,     // 800x600
	FRAMESIZE_SXGA,     // 1280x1024
	FRAMESIZE_UXGA,     // 1600x1200
	FRAMESIZE_CUSTOM,
} framesize_t;

typedef enum {
	GAINCEILING_2X,
	GAINCEILING_4X,
	GAINCEILING_8X,
	GAINCEILING_16X,
	GAINCEILING_32X,
	GAINCEILING_64X,
	GAINCEILING_128X,
} gainceiling_t;

typedef enum {
	FRAMERATE_2FPS = 0x9F,
	FRAMERATE_8FPS = 0x87,
	FRAMERATE_15FPS = 0x83,
	FRAMERATE_30FPS = 0x81,
	FRAMERATE_60FPS = 0x80,
} framerate_t;

static const uint8_t ov2640_config[][2] =
{
	{0xff, 0x01},
	{0x12, 0x80},
	{0xff, 0x00},
	{0x2c, 0xff},
	{0x2e, 0xdf},
	{0xff, 0x01},
	{0x3c, 0x32},
	{0x11, 0x00},
	{0x09, 0x02},
	{0x04, 0x88},
	{0x13, 0xe5},
	{0x14, 0x48},
	{0x2c, 0x0c},
	{0x33, 0x78},
	{0x3a, 0x33},
	{0x3b, 0xfb},
	{0x3e, 0x00},
	{0x43, 0x11},
	{0x16, 0x10},
	{0x39, 0x92},
	{0x35, 0xda},
	{0x22, 0x1a},
	{0x37, 0xc3},
	{0x23, 0x00},
	{0x34, 0xc0},
	{0x36, 0x1a},
	{0x06, 0x88},
	{0x07, 0xc0},
	{0x0d, 0x87},
	{0x0e, 0x41},
	{0x4c, 0x00},
	{0x48, 0x00},
	{0x5b, 0x00},
	{0x42, 0x03},
	{0x4a, 0x81},
	{0x21, 0x99},
	{0x24, 0x40},
	{0x25, 0x38},
	{0x26, 0x82},
	{0x5c, 0x00},
	{0x63, 0x00},
	{0x46, 0x22},
	{0x0c, 0x3c},
	{0x61, 0x70},
	{0x62, 0x80},
	{0x7c, 0x05},
	{0x20, 0x80},
	{0x28, 0x30},
	{0x6c, 0x00},
	{0x6d, 0x80},
	{0x6e, 0x00},
	{0x70, 0x02},
	{0x71, 0x94},
	{0x73, 0xc1},
	{0x3d, 0x34},
	{0x5a, 0x57},
	{0x12, 0x40},
	{0x17, 0x11},
	{0x18, 0x43},
	{0x19, 0x00},
	{0x1a, 0x4b},
	{0x32, 0x09},
	{0x37, 0xc0},
	{0x4f, 0xca},
	{0x50, 0xa8},
	{0x5a, 0x23},
	{0x6d, 0x00},
	{0x3d, 0x38},
	{0xff, 0x00},
	{0xe5, 0x7f},
	{0xf9, 0xc0},
	{0x41, 0x24},
	{0xe0, 0x14},
	{0x76, 0xff},
	{0x33, 0xa0},
	{0x42, 0x20},
	{0x43, 0x18},
	{0x4c, 0x00},
	{0x87, 0xd5},
	{0x88, 0x3f},
	{0xd7, 0x03},
	{0xd9, 0x10},
	{0xd3, 0x82},
	{0xc8, 0x08},
	{0xc9, 0x80},
	{0x7c, 0x00},
	{0x7d, 0x00},
	{0x7c, 0x03},
	{0x7d, 0x48},
	{0x7d, 0x48},
	{0x7c, 0x08},
	{0x7d, 0x20},
	{0x7d, 0x10},
	{0x7d, 0x0e},
	{0x90, 0x00},
	{0x91, 0x0e},
	{0x91, 0x1a},
	{0x91, 0x31},
	{0x91, 0x5a},
	{0x91, 0x69},
	{0x91, 0x75},
	{0x91, 0x7e},
	{0x91, 0x88},
	{0x91, 0x8f},
	{0x91, 0x96},
	{0x91, 0xa3},
	{0x91, 0xaf},
	{0x91, 0xc4},
	{0x91, 0xd7},
	{0x91, 0xe8},
	{0x91, 0x20},
	{0x92, 0x00},
	{0x93, 0x06},
	{0x93, 0xe3},
	{0x93, 0x05},
	{0x93, 0x05},
	{0x93, 0x00},
	{0x93, 0x04},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x93, 0x00},
	{0x96, 0x00},
	{0x97, 0x08},
	{0x97, 0x19},
	{0x97, 0x02},
	{0x97, 0x0c},
	{0x97, 0x24},
	{0x97, 0x30},
	{0x97, 0x28},
	{0x97, 0x26},
	{0x97, 0x02},
	{0x97, 0x98},
	{0x97, 0x80},
	{0x97, 0x00},
	{0x97, 0x00},
	{0xc3, 0xed},
	{0xa4, 0x00},
	{0xa8, 0x00},
	{0xc5, 0x11},
	{0xc6, 0x51},
	{0xbf, 0x80},
	{0xc7, 0x10},
	{0xb6, 0x66},
	{0xb8, 0xa5},
	{0xb7, 0x64},
	{0xb9, 0x7c},
	{0xb3, 0xaf},
	{0xb4, 0x97},
	{0xb5, 0xff},
	{0xb0, 0xc5},
	{0xb1, 0x94},
	{0xb2, 0x0f},
	{0xc4, 0x5c},
	{0xc0, 0x64},
	{0xc1, 0x4b},
	{0x8c, 0x00},
	{0x86, 0x3d},
	{0x50, 0x00},
	{0x51, 0xc8},
	{0x52, 0x96},
	{0x53, 0x00},
	{0x54, 0x00},
	{0x55, 0x00},
	{0x5a, 0xc8},
	{0x5b, 0x96},
	{0x5c, 0x00},
	{0xd3, 0x02},
	{0xc3, 0xed},
	{0x7f, 0x00},
	{0xda, 0x08},
	{0xe5, 0x1f},
	{0xe1, 0x67},
	{0xe0, 0x00},
	{0xdd, 0x7f},
	{0x05, 0x00},
	{0xff, 0x00},
	{0xe0, 0x04},
	{0x5a, 0x50},
	{0x5b, 0x3c},
	{0x5c, 0x00},
	{0xe0, 0x00},
	{0x00, 0x00}
};



#define DCMI_RESET_LOW()      dvp->cmos_cfg &= ~DVP_CMOS_RESET
#define DCMI_RESET_HIGH()     dvp->cmos_cfg |= DVP_CMOS_RESET
#define DCMI_PWDN_LOW()       dvp->cmos_cfg |= DVP_CMOS_POWER_DOWN
#define DCMI_PWDN_HIGH()      dvp->cmos_cfg &= ~DVP_CMOS_POWER_DOWN


#define CAM_WIDTH (320)
#define CAM_HEIGHT (240)

//#define CAM_WIDTH (240)
//#define CAM_HEIGHT (320)


#define OV9650_ID       (0x96)
#define OV2640_ID       (0x26)
#define OV7725_ID       (0x77)
#define MT9V034_ID      (0x13)
#define LEPTON_ID       (0x54)
#define OV_CHIP_ID      (0x0A)
#define ON_CHIP_ID      (0x00)
#define GC0328_ID       (0x9d)
#define GC0328_ADDR     (0x42)


uint16_t* get_k210_aiBuffer();

uint16_t* get_k210_dataBuffer();

int cambus_read_id(uint8_t addr, uint16_t* manuf_id, uint16_t* device_id);

int cambus_readb(uint8_t slv_addr, uint8_t reg_addr, uint8_t* reg_data);

int cambus_writeb(uint8_t slv_addr, uint8_t reg_addr, uint8_t reg_data);

int cambus_scan();

static int sensor_irq(void* ctx);

int dvpInitIrq();

int dvpInit(uint32_t freq);

int OV2640_reset(int addr);

int OV2640_read_reg(int addr, uint8_t reg_addr);

int OV2640_write_reg(int addr, uint8_t reg_addr, uint8_t reg_data);

int OV2640_set_pixformat(int addr, pixformat_t pixformat);

int OV2640_set_framesize(int addr, framesize_t framesize);

int Sipeed_OV2640_reverse_u32pixel(uint32_t* addr, uint32_t length);

int Sipeed_OV2640_sensor_snapshot();

int Sipeed_OV2640_run(int run);

int Sipeed_OV2640_begin(int addr, int freq);

void Sipeed_OV2640_end();

int Sipeed_OV2640_reset(int addr, int freq);

#endif